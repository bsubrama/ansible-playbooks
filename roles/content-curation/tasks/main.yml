---

- name: Create the /var/www directory and set it as belonging to the www-data user.
  file: dest=/var/www owner=www-data state=directory
  sudo: yes
  tags:
    - setupcontentcuration

- name: clone the content curation repo
  git: repo=https://github.com/fle-internal/content-curation.git version={{ content_curation_git_branch }} dest=/var/www/{{ content_curation_prefix }} update=yes force=yes
  sudo: yes
  sudo_user: www-data
  notify: restart nginx
  tags:
    - updatecontentcuration
    - setupcontentcuration

- name: add the nodejs ppa
  shell: curl -sL https://deb.nodesource.com/setup_4.x | bash -
  sudo: yes
  tags:
    - setupdeps

- name: install deps
  apt: name={{ item }}
  sudo: yes
  with_items:
    - nodejs
    - nginx
    - python3-dev
    - python3-pip
    - python-virtualenv
  tags:
    - setupdeps

- name: setup nginx
  template: src=nginx.content-curation.conf.j2 dest=/etc/nginx/sites-enabled/{{ content_curation_prefix }}
  notify: restart nginx
  sudo: yes
  tags:
    - setupnginx
    - setupcontentcuration

- name: remove default nginx config
  file: dest=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx
  sudo: yes
  tags:
    - setupnginx
    - setupcontentcuration

- name: install node deps
  shell: npm install
  args:
    chdir: /var/www/{{ content_curation_prefix }}/
  sudo: yes
  sudo_user: www-data
  tags:
    - setupdeps

- name: ensure that the content-curation postgres database is present
  postgresql_db: name=content-curation owner=www-data state=present login_password=NULL login_user=www-data
  sudo: yes
  sudo_user: www-data
  tags:
    - setupdeps
    - setupcontentcuration
    - setupdb

# - name: install python deps
#   shell: "{{ pip_binary }} install -r requirements.txt"
#   args:
#     chdir: /var/www/{{ content_curation_prefix }}/
#   sudo: yes
#   tags:
#     - setupdeps
#     - setupcontentcuration

- name: initiate virtualenv with dependencies
  pip: virtualenv={{ content_curation_virtualenv }}
       virtualenv_python=python2
       requirements=/var/www/{{ content_curation_prefix }}/requirements.txt
  sudo: yes
  sudo_user: www-data
  tags:
    - setupdeps
    - setupcontentcuration

- name: Copy production settings
  template: src=production_settings.py.j2 dest=/var/www/{{ content_curation_prefix }}/contentcuration/contentcuration/production_settings.py owner=www-data
  sudo: yes
  when:
    - content_curation_database_name is defined
    - content_curation_database_user is defined
    - content_curation_database_password is defined
  tags:
    - setupcontentcuration
    - setupsettings

- name: run content curation migrations
  shell: DJANGO_SETTINGS_MODULE=contentcuration.production_settings {{ python_binary }} manage.py migrate
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration

- name: Load the fixture data
  shell: DJANGO_SETTINGS_MODULE=contentcuration.production_settings {{ python_binary }} manage.py loadconstants
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration

- name: create the js/bundles folder
  file: path=/var/www/{{ content_curation_prefix }}/contentcuration/static/js/bundles state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - buildassets
    - setupcontentcuration

- name: allow port 80 on our firewall
  ufw: policy=allow to_port=80
  sudo: yes
  tags:
    - setupcontentcuration

- name: create the media file directory
  file: path=/var/www/{{ content_curation_prefix }}_media/ state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration
    - setupsettings

- name: build the js bundles
  shell: nodejs build.js
  args:
    chdir: /var/www/{{ content_curation_prefix }}/
  sudo: yes
  sudo_user: www-data
  tags:
    - buildassets
    - setupcontentcuration

- name: create the static file directory
  file: path=/var/www/{{ content_curation_prefix }}_static/ state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration
    - setupsettings

- name: collect the assets
  shell: DJANGO_SETTINGS_MODULE=contentcuration.production_settings {{ python_binary }} manage.py collectstatic --noinput && {{ python_binary }} manage.py collectstatic_js_reverse
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  tags:
    - buildassets
    - setupcontentcuration


# - name: Load the fixture data
#   shell: python manage.py loaddata initial_data.json
#   args:
#     chdir: /var/www/

- name: check if the app server pid file info
  stat: path={{ content_curation_server_pid_file }}
  register: pid_file
  sudo: yes
  sudo_user: www-data
  tags:
    - runserver

- name: retrieve the app server pid file
  fetch: src={{ content_curation_server_pid_file }} dest=/tmp/gunicorn.pid fail_on_missing=yes flat=yes
  when: pid_file.stat.exists
  tags:
    - runserver

- name: reload the app server when it is already running
  shell: kill -s 1 {{ lookup('file', '/tmp/gunicorn.pid') }}
  sudo: yes
  sudo_user: www-data
  when: pid_file.stat.exists
  tags:
    - runserver

- name: run the server if it is not running
  shell: "{{ gunicorn_binary }} contentcuration.wsgi --workers 3 --daemon --reload --bind=unix:/var/www/{{ content_curation_prefix}}/gunicorn.sock --pid {{ content_curation_server_pid_file }} --env PYTHONPATH='.:contentcuration/' --env DJANGO_SETTINGS_MODULE=contentcuration.production_settings --log-file /tmp/content_curation.log --log-level debug"
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  when: pid_file.stat.exists == False
  tags:
    - runserver
